КОНТЕКСТ И ЕГО УСТАНОВКА
  Контекст this:
    - http://web.archive.org/web/20190405104502/http://learn.javascript.ru/object-methods (до главы "Ссылочный тип")
  Методы для установки контекста:
    - Метод bind - см. скрин
    - Методы call/apply - см. скрины
  Разница между bind и call/apply:
    Bind - только устанавливает контекст и передает параметры раздельно, но не вызывает функцию к работе
    Call - устанавливает контекст, передает параметры раздельно и вызывает функцию
    Apply - устанавливает контекст, передает параметры в виде массива и вызывает функцию, в функции параметры
    принимаются по-прежнему как раздельные
  Чем будет являться this в конкретном случае:
    - См. скрин

КЛАСС И ОБЪЕКТ КЛАССА
  - Понятие класса и объекта класса, свойства и методы

  Описание собственного класса и объекта класса:
    - См. скрин
    - Функция-конструктор - фабрика по производству объектов, иначе говоря шаблон
    - Что запишется в объект
    - В this записывается текущий объект класса
    - Фиксированные свойства "хардкодятся", динамические чаще всего получают из параметров функции-конструктора
    - Классы в целом могут не содержать динамических св-в, а также не содержать св-в или методов вообще
    - Удаление объектов класса - нет прямого способа, присваивается null

    Доп. инфо:
      - Слайд B.60c - последовательность действий

  Сравнение простого объекта и объекта класса:
    - См. скрины

  Практическое задание 1:
    Создать класс Cat. Добавить ему свойство - name, которое будем получать при создании объекта класса, и пока пустой
    метод feed. Создать объект класса Cat, вывести в консоль его имя и затем удалить объект.
    (Разобрать правила форматирования).

ПРИНЦИПЫ ООП
  Инкапсуляция:
    Это процесс сокрытия части реализации интерфейса от пользователя.
    Например, мы не знаем, как устроен чайник изнутри, но тем не менее имеем простой интерфейс для работы с ним.
  Наследование:
    Это возможность наследовать свойства и методы других классов.
    Например, у всех объектов класса "Животные" (супер-класс) есть свойство "количество лап" и метод "покормить животное".
    Класс "Кошки", в свою очередь, может отнаследовать данные свойство и метод, т.к. они присущи и кошкам (при
    наследовании также можно расширять и дополнять метод родителя).
    В то же время у объектов класса "Кошки" могут быть и свои специфичные свойства и методы, например "длина шерсти" и
    "погладить животное".
  Полиморфизм
  "Утиная типизация"

ФУНКЦИОНАЛЬНЫЙ СТИЛЬ ООП
  Публичные и приватные свойства и методы, сохранение контекста:
    - https://learn.javascript.ru/internal-external-interface

    Практическое задание 2:
      Добавить в класс Cat приватное свойство foodAmount, равное 50, и приватный метод formatFoodAmount, который
      будет возвращать это свойство + слово 'гр.'. В методе feed необходимо выводить в консоль информацию вида:
        "Насыпаем в миску (количество гр.) корма."
      "Количество гр." получаем с помощью метода formatFoodAmount.
      Вывести в консоль результат выполнения метода feed.

  Геттеры и сеттеры:
    - https://learn.javascript.ru/getters-setters

    Практическое задание 3:
      Написать единый геттер-сеттер dailyNorm для установки/получения количества корма (foodAmount).
      Оно не должно быть меньше 50 и больше 100 грамм. В случае некорректного количества возвращать сообщение об ошибке.
      Если функция вызывается как геттер - она должна возвращать уже отформатированное значение foodAmount.
      Протестировать метод dailyNorm с разными значениями параметра и без него. Метод feed должен оперировать актуальной
      информацией (использовать внутри себя вызов геттера).