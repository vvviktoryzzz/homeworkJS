ПОЛИМОРФИЗМ
  Полиморфный конструктор:
    - см. Polymorphism -> Constructor

  Классический полиморфизм в JS и утиная типизация:
    - Классический полиморфизм - это многообразие форм объекта, передаваемого в функцию. Мы можем передать в функцию
      объект родительского класса или же объект отнаследованного от него класса, и функция гарантированно отработает
      успешно, потому что, благодаря наследованию, в объекте дочернего класса также будут все необходимые для работы
      функции св-ва и методы.
    - Утиная типизация - это возможность функции корректно работать не только с объектами родительских и дочерних
      классов, но и с совершенно посторонними обыкновенными объектами, при наличии у них всех необходимых для работы
      функции св-в и методов. "Если это ходит как утка, выглядит как утка и крякает как утка - для нас это утка, и не
      важно, что это на самом деле".
    - Пример - см. Polymorphism -> Classic and duck typing

  Полиморфизм в ООП - см. скрин:
    - Это возможность полностью изменять или расширять поведение родительского метода в дочернем классе, сохраняя при этом
      одинаковое его название в обоих классах.
      Например, если у класса Животные есть метод "покормить" - при наследовании класс "Кошки"
      также получит возможность использовать этот метод. Однако у кошек способ кормления может частично или полностью
      отличаться от поведения родительского метода (например, после кормления мы хотим "погладить кота").
    - см. Polymorphism -> Same method, different behaviour

СОРТИРОВКИ
  - Метод sort при сортировке строк отдает приоритет цифрам, далее заглавным буквам англ. алфавита, прописным буквам
    англ. алфавита, затем заглавным русского и прописным русского
  - Сортировка массива чисел - см. скрины
  - B.45 - Сортировка объектов
  - Виды сортировок - https://habrahabr.ru/post/204600/
  - Пузырьковая сортировка - см. пример

WINDOW, BOM
  - Общая информация - https://learn.javascript.ru/browser-environment
  - K.37-40 - Глобальный объект window

DOM
  Дерево DOM:
    - Каждому тегу в html соответствует свой объект в DOM-дереве с полной информацией об этом теге, его атрибутах,
      координатах, содержимом, стилях и т.д. DOM является своего рода связующим звеном между JavaScript-кодом и
      HTML-страницей.
    - https://learn.javascript.ru/dom-nodes
    - Пример DOM-объекта через console.dir
    - K.36 - Предсозданный объект document
  Поиск элементов в дереве:
    - Cм. DOM Properties and Methods
  Навигация по DOM-элементам:
    - Навигация - это поиск ближайших элементов от ранее найденных
    - Cм. DOM Properties and Methods
  Манипуляция элементами дерева:
    - Cм. DOM Properties and Methods
  Работа с содержимым элемента:
    - https://www.w3schools.com/jsref/met_node_insertadjacenthtml.asp
    - Вставка многострочного html-кода - см. скрин
    - Cм. DOM Properties and Methods
  Некоторые нюансы:
    - HTML-коллекции (псевдо-массивы) - см. DOM Properties and Methods:
      Не являются массивами. У них есть свойство length, можно обращаться к их элементам через arr[i],
      однако, у них нет методов, присущих объектам класса Array (например push(), pop(), forEach(), map() и т.д.)
      Содержимое псевдо-массивов, возвращаемых методами document.getElement(s)By*, живое — если дерево DOM изменяется
      (напр. удаляются или добавляются элементы), при следующем обращении к псевдо-массиву его содержимое автоматически
      обновляется
    - Node List не является живой коллекцией, однако к нему применим метод forEach()
    - Операции с DOM - самые дорогостоящие по времени

ДОМАШНЕЕ ЗАДАНИЕ 10
  Задание 1:
    Написать функцию, принимающую массив имен и возвращающую массив объектов вида {name: 'Vasya'}.

  Задание 2:
    Написать функцию, принимающую массив вида ['00', '13', '24'] и возвращающую строку "Текущее время : 00 : 13 : 24".
    Для решения использовать перебирающий метод массивов (не метод join).

  Задание 3:
    Написать функцию, которая будет возвращать количество гласных в переданном тексте. Регистр любой. Решение не
    должно быть "топорным".

  Задание 4:
    Написать функцию, которая будет принимать текст в качестве параметра. У текста должны быть пробелы, точки, запятые,
    восклицательные и вопросительные знаки. Текст необходимо разбить на предложения (по точкам, восклицательным и
    вопросительным знакам - убрав их).
    Для каждого из предложений - отдельно вывести текст предложения и рядом количество букв в нем (без учета пробелов,
    запятых и т.д. - именно букв). Из ранее непройденных методов разрешается использовать только (!!!) регулярное выражение
    в методе split.

    Функция должна работать следущим образом (потестировать на данном тексте):
      countSentencesLetters('Привет, студент! Студент... Как дела, студент?');
      // Привет, студент: Letters quantity is: 13
      // Студент: Letters quantity is: 7
      // Как дела, студент: Letters quantity is: 14

  Задание 5 *:
    Написать функцию, которая будет находить в переданном ей тексте первое наиболее часто повторяемое слово и возвращать
    информацию вида:
      "Максимальное число повторений у слова "привет" - 8"
    Для удобного разделения текста на слова сразу по нескольким знакам препинания - разрешается использовать регулярное
    выражение в методе split.