ФУНКЦИИ
  О функциях:
    - http://web.archive.org/web/20190405104507/http://learn.javascript.ru/function-basics
    - Функция может работать с большим количеством параметров
    - Сама по себе функция возвращает undefined
    - Функции можно копировать через =
    - Псевдомассив arguments - см. скрины

    Практическое задание - задачи 1 и 2 с http://web.archive.org/web/20190405104507/http://learn.javascript.ru/function-basics

  Сравнение Function Declaration и Function Expression, анонимная функция:
    - http://web.archive.org/web/20190405104507/http://learn.javascript.ru/function-declaration-expression

  Самовызывающаяся функция:
    - IIFE - см. скрин
    - Пример изоляции области видимости с помощью самовызывающейся функции

  Чистая функция (pure function):
    - Это функция, которая всегда для одних и тех же входных значений возвращает одинаковый результат и не изменяет
      ничего снаружи себя
    - См. скрины

  Рекурсия:
    - Вызов функцией самой себя
    - См. скрин
    - Использовать рекурсию не экономно по памяти

  Callback или функция обратного вызова:
    - Это функция, передающаяся как параметр в другую функцию, полученный код функции-коллбэка может вызываться внутри
      принимающей функции
    - См. скрины

  Замыкание:
    - "Поднятие" переменных и функций - https://developer.mozilla.org/ru/docs/%D0%A1%D0%BB%D0%BE%D0%B2%D0%B0%D1%80%D1%8C/%D0%9F%D0%BE%D0%B4%D0%BD%D1%8F%D1%82%D0%B8%D0%B5
    - https://learn.javascript.ru/closures (До главы "Возврат функции")
    - Схема поиска значений переменных - см. скрин
    - Замыкание - это внешние переменные функции, доступные ей. Доступ к ним также сохраняется, даже если родительские
      функции-владельцы данных LE уже не выполняются или даже не существуют.
    - Пример замыкания

  Каррирование:
    - Это создание новой функции путём фиксирования аргументов существующей
    - См. скрин
    - http://prgssr.ru/development/vvedenie-v-karrirovanie-v-javascript.html#heading-section-1 - глава "Каррируем всё"

ДОПОЛНИТЕЛЬНАЯ ИНФОРМАЦИЯ *
  Строгий режим "use strict":
    - См. скрины
    - Режим может устанавливаться как для всего скрипта, так и для отдельной функции

ДОМАШНЕЕ ЗАДАНИЕ 4
  Задание 1:
    Создать функцию isEmpty(obj), которая возвращает true, если в объекте нет свойств и false – если хоть одно
    свойство есть.

  Задание 2:
    Написать функцию pow(x, n), которая возвращает x в степени n,
    иначе говоря, умножает x на себя n раз и возвращает результат.
    Запросить у пользователя x и n, а затем вывести результат pow(x, n).
    В этой задаче функция обязана поддерживать только натуральные значения n, т.е. целые от 1 и выше.

  Задание 3:
    Написать функцию sumTo(n), которая для данного n вычисляет сумму чисел от 1 до n, например:
      sumTo(1) = 1
      sumTo(2) = 2 + 1 = 3
      sumTo(3) = 3 + 2 + 1 = 6
      sumTo(4) = 4 + 3 + 2 + 1 = 10
      sumTo(100) = 100 + 99 + ... + 2 + 1 = 5050

    Сделать три варианта решения:
      - с использованием цикла
      - через рекурсию, sumTo(n) = n + sumTo(n-1) для n > 1
      - с использованием формулы для суммы арифметической прогрессии

    Ответить на вопросы в комментариях:
      Какой вариант решения самый быстрый? Самый медленный? Почему?
      Можно ли при помощи рекурсии посчитать sumTo(100000)? Если нет, то почему?

  Задание 4:
    Разработать функцию treeSum, которая будет принимать массив, элементы которого могут быть числами или снова массивами,
    и так до любого уровня вложенности. Функция должна рассчитать и вернуть сумму всех числовых элементов массива.
    Некоторые уточняющие условия:
      - Если работаем с числом - должна присутствовать проверка на то, что это число и оно корректно (не NaN)
      - Если работаем с массивом - для определения массива метод isArray использовать запрещено, необходимо нагуглить
        способ, как определить, что перед вами массив - с использованием только пройденных тем
      - Другие значения, помимо числа и массива, разрешается не обрабатывать, однако они не должны ломать работу функции
      - Функция должна быть чистой
      - При написании функции не описывать каких-либо вложенных в неё функций
      - При решении также запрещено использование методов join/split и всего того, что еще не было пройдено
    Проверить работу функции можно на следующем массиве (сумма должна быть равна 50):
      [
        5, 7,
        [4, [2], 8, [1, 3], 2],
        [9, []],
        1, 8
      ]