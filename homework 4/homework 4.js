// задание 1

function isEmpty(obj) {
    for (var random in obj) {
        return false;
    }
    return true;
  }

//задание 2
var x = +prompt ('Введите число:'),
    n = +prompt ('Введите степень числа:');

function pow() {
  var res = 1;
  for (var i = 0; i < n; i++) {
    res *= x;
  }
  return res;
}
if (n <= 1) {
    alert('Данная спень не является натуральным числом, введите число >= 1' );
} else {
    alert( 'Ваш результат: ' + pow()); 
}
 
//задание 3
var n = +prompt ('Введите число:')

//с использованием формулы для суммы арифметической прогрессии
function sumTo() {
  return n * (n + 1) / 2;
}
alert( sumTo());

//через рекурсию, sumTo(n) = n + sumTo(n-1) для n > 1
function sumTo() {
  if (n > 1)  return n + sumTo(n - 1);
  return 1;
}
alert( sumTo());

//с использованием цикла
function sumTo() {
  var sum = 0;
  for (var i = 1; i <= n; i++) {
    sum += i;
  }
  return sum;
}
alert( sumTo() );
 /*
 "Какой вариант решения самый быстрый? Самый медленный? Почему?"
Самым быстрым вариантом решения является вариант с формулой, там как минимум 3 действия,
ну и человеческой точки зрения так быстрее, проще же посчитать по формуле, чем каждый раз прибавлять 1)
Самым же медленным будет способ с рекурсией т.к. здесь уже н кол-во операций и занимает больше памяти, чем например цикл

"Можно ли при помощи рекурсии посчитать sumTo(100000)? Если нет, то почему?"
Нет, потому что память не справится с таким количеством вызовов функций
 */



