ФОРМАТ ДАННЫХ JSON
  - I.35-37 (пример в консоли)
  - Слайд K.40 - Использование JSON для создания глубокой копии сложного объекта (хорошо работает со всем, кроме
    методов, undefined, NaN и Infinity)

WEBSTORAGE
  - I.60 и DevTools - вкладка Application (пример в консоли)
  - localStorage.getItem('ключ') возвращает null, если такового ключа нет в хранилище, однако использование вот
    такого синтаксиса - localStorage['ключ'] (как у обычных объектов) - вернет undefined
  - Session Storage - см. скрин
  - Событие storage - см. пример

Практическое задание (продолжение предыдущего задания):
  По кликам на ссылки второго абзаца проверять, если информации об этой ссылке нет в LS - записать ее туда. Ключом
  должен быть текст ссылки, а значением объект вида { path: (путь ссылки) }. После записи изменить значение атрибута
  href ссылки на "#" и выводить alert с уведомлением о том, что ссылка была сохранена.
  Если же информация об этой ссылке уже записана в LS, выводить в alert путь ссылки из объекта из хранилища.
  При загрузке страницы localStorage должен очищаться.

ОБЩЕНИЕ МЕЖДУ КЛИЕНТОМ И СЕРВЕРОМ
  - См. скрины

AJAX
  О возможностях AJAX и COMET:
    - https://learn.javascript.ru/ajax-intro
    - В ES7 используется технология fetch

  Основы XMLHttpRequest:
    - Разбор основных методов и свойств класса XMLHttpRequest, предназначенных для создания, отправки запроса и
      получения ответа - см. пример

    DevTools - вкладка Network:
      - Что можно делать во вкладке
      - Разбор составляющих запроса
      - Заголовки
      - Cookies и работа с ними - см. скрины + вкладка Application

  Отправка данных:
    - Методы запросов и форматы отправки данных при их использовании - см. пример

  Какой запрос считается кросс-доменным:
    - https://learn.javascript.ru/same-origin-policy, плагин Allow CORS

  API:
    - Это интерфейс (на бэк-энде), который содержит в себе обработчики потенциально предполагаемых запросов и
      выступает связующим звеном между клиентом (фронт-энд приложением) и базой данных

ОБРАБОТКА ИСКЛЮЧЕНИЙ
  - A.78 (первые 2 стр. + finally)
  - Catch можно использовать без параметра (просто не прописывать круглые скобки)
  - Порождать ошибку можно также через throw new Error('Something went wrong')

  Практическое задание:
    Создать GET-запрос по адресу https://reqres.in/api/users?page=2. Проверить, получаются ли данные с сервера.
    Описать свой блок try/catch в обработчике успешного запроса. В try попытаться распарсить JSON-ответ с сервера.
    Если исключения не возникает - породить его самостоятельно (попробовать 2 способа порождения).
    Если возникает исключение (строка некорректная) - в блоке catch вывести в консоль информацию об ошибке.
    Протестировать оба варианта. Убедиться, что код после блока try/catch продолжает выполняться.

ОПТИМИЗАЦИЯ СКОРОСТИ ЗАГРУЗКИ СТРАНИЦЫ
  - См. скрины

ИНФОРМАЦИЯ ПРО ИТОГОВЫЙ ПРОЕКТ
  Общие критерии - 6.25:
    - Адекватная файловая структура - 0.25
    - Скрипты и библиотеки подключаются правильно - 0.25
    - Красота кода - 1.5:
      - Отсутствует неиспользуемый код и дебаггеры - 0.25
      - Используется 1 вид синтаксиса JS - 0.25
      - Аккуратные отступы и одинаковые кавычки - 0.5
      - Адекватные имена переменных и функций - 0.5
    - Оптимизация кода (неизобретение велосипедов) - 1

    - Отсутствуют баги и ошибки в консоли - 0.75
    - Адаптивность и использование препроцессоров - 0.75
    - Логическая завершенность проекта (завершенный функционал, а также навигация и сохранение данных) - 0.75
    - Сложность проекта - 1

  Технологии - 3.75:
    - SPA - 0.75
    - Запросы и Node.js - 0.75
    - Сборщик проекта - 0.75
    - Темплейты - 0.5
    - Самостоятельно изученные технологии - напр. анимации, параллакс, диаграммы, графика, drag'n'drop, работа с мультимедиа,
      возможности Node.js - напр. отправка файлов на сервер, отправка писем или авторизация, лоадеры WebPack для шрифтов
      или изображений, тесты, подключение базы данных, фишки из ES7-8 и т.д. - 1
      (!!!) Самостоятельно изученная технология изучается полностью самостоятельно. Если используется простая
      технология - нужно применить несколько разных.

  О библиотеках, которые можно использовать
  За основательный копипаст моего приложения-примера оценка за проект снижается на 1 балл.

  Примеры выпускных проектов:
    - Проекты моих студентов
    - Идеи проектов - тест, to-do list, счетчик каллорий, конвертер валют, учет доходов и расходов, кроссворд, обучалка
      (напр. иностранного языка, слепой печати), интернет-магазин, доставка еды, пэт менеджер, конструктор сайта,
      приложение для тренировок, алкогольный калькулятор, медицинский калькулятор, виртуальный гардероб, анализатор
      состава еды/косметики, продажа билетов на концерты, комиксы, сервировка стола, pos-система, управление и учет
      сотрудников компании, конструктор пиццы, справочник (напр. медицинский), бронирование жилья, учет заказов компании,
      виртуальное фортепиано, игрушки
      (Старайтесь выбрать идею такого проекта, которым вы бы сами хотели пользоваться, или который можно впоследствии
      продать :)

ДОПОЛНИТЕЛЬНАЯ ИНФОРМАЦИЯ *
  - AJAX - https://learn.javascript.ru/ajax-xmlhttprequest
  - Методы кодировки - escape(), encode-/decodeURI(), encode-/decodeURIComponent() - http://s3blog.org/escape-encodeuri-encodeuricomponent.html
  - Пути к файлам - http://www.uamedwed.com/blog/web/absolyutnyj-i-otnositelnyj-put-k-fajlam.html
  - Список кодов состояния - https://ru.wikipedia.org/wiki/%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA_%D0%BA%D0%BE%D0%B4%D0%BE%D0%B2_%D1%81%D0%BE%D1%81%D1%82%D0%BE%D1%8F%D0%BD%D0%B8%D1%8F_HTTP
  - Слайд F.90 - Кроссбраузерность — полифилл, фолбек, изящный отказ, постепенное улучшение

ДОМАШНЕЕ ЗАДАНИЕ 12
  Задание 1:
    Добавить на страницу два поля для ввода - X и Y и кнопку "Create".
    Если хотя бы одно из полей пустое - кнопка дизэйблится (делать по keyup).
    Поля должны принимать только целые числа от 1 до 10, в противном случае должно выводиться сообщение об ошибке
    (делать по click).
    По клику на кнопку должна отрисоваться шахматная доска с размерами X по горизонтали и Y по вертикали. Логика
    разукрашивания ячеек не должна храниться в css (не использовать nth-child и т.д.).
    При введении значений X и Y заново таблица должна корректно перерисоваться.
    По клику на любое поле доски - цвета всех полей должны изменяться на противоположные.