/**************
  AJAX-ЗАПРОС
**************/

(function() {
    // Создаем объект класса XMLHttpRequest
    var xhr = new XMLHttpRequest();

    /* Настраиваем будущий запрос

      1-й параметр - метод запроса:
        - см. подробнее примеры ниже

      2-й параметр - URL запроса:
        - может использоваться как относительный, так и абсолютный

      3-й параметр - асинхронность:
        - если выставлен в true - запрос асинхронный (по-умолчанию), работа страницы во время отправки запроса не блокируется
        - если выставлен в false - запрос синхронный, работа страницы во время отправки запроса блокируется
    */
    xhr.open('GET', 'https://reqres.in/api/users?page=2', true); // успешный запрос (код 200) - попадем в onload
 // xhr.open('GET', 'https://reqres.in/api2/users?page=2'); // неуспешный запрос - несуществующая страница (код 404) - попадем в onload
 // xhr.open('GET', 'https://reqres1.in/api/users?page=2'); // неуспешный запрос - несуществующий домен (код 0) - попадем в onerror

    // Отправляем запрос на сервер
    xhr.send();

	// Отслеживаем событие окончания запроса
    // Данный обработчик срабатывает при кодах состояния ответа сервера с 2 до 5
	// Успешным считается запрос, чей код состояния начинается на 2 или 3
	// Неуспешным считается запрос, чей код состояния начинается на 0, 4 или 5
	// Проверку кода состояния можно осуществлять по его 1-й цифре
	// Ответ сервера будет храниться в свойстве response объекта xhr
	// Код состояния и пояснение к нему будут храниться в свойствах status и statusText объекта xhr
    // this в данном контексте = xhr
	xhr.onload = function() {
	    var statusType = Math.round(this.status / 100);
	//  var statusType = +String(this.status)[0];

    	console.log((statusType === 2) ? JSON.parse(this.response).data : this.status);
    };

	// Сработает в ситуации с CORS либо при проблемах с каналом связи (например, неверный домен) - код состояния 0
    xhr.onerror = function() {
        console.error(this.status);
    };

    // Отслеживаем любое окончание запроса, не важно - успешное либо нет
    // Метод чаще всего используется для очищения каких-либо действий, например для прятания лоадера
    xhr.onloadend = function() {
        console.log('Запрос завершен');
    };
})();

/********************************************
  МЕТОДЫ ЗАПРОСОВ И ФОРМАТЫ ОТПРАВКИ ДАННЫХ
********************************************/
/*
  Метод запроса GET:
    - направлен чаще всего на получение данных из базы
    - если запрос идет не на API *, а на обычную страницу сайта - чаще всего вернется HTML-разметка данной страницы
    - данные для сервера передаются только в урле

  Формат отправки данных - кодировка application/x-www-form-urlencoded:
    - данные передаются в урле запроса в виде строки с параметрами, чьи значения кодируются специальными методами *
*/
(function() {
    var xhr = new XMLHttpRequest();

    var params = '?page=2' + '&name=' + encodeURIComponent('Вася') +
        '&surname=' + encodeURIComponent('Пупкин');

    xhr.open('GET', 'https://reqres.in/users' + params);

    xhr.send();
})();

/*
  Метод запроса POST:
    - используется для отправки данных, добавления чего-то нового в базу данных
    - данные для сервера передаются в теле запроса, но могут отправляться и доп. параметры в урле (как в примере выше)

  Формат отправки данных - кодировка multipart/form-data:
    - данные передаются в методе send() объектом класса FormData
    - способ чаще используется для отправки данных простых форм, т.к. будет не совсем корректно работать с массивами и
      объектами
*/
(function() {
    var xhr = new XMLHttpRequest();

    xhr.open('POST', 'https://reqres.in/users?page=2');

    var formData = new FormData();

    formData.append('age', 25);
    formData.append('data', [{}]);

    xhr.send(formData);
})();

/*
  Метод запроса POST:
    - используется для отправки данных, добавления чего-то нового в базу данных
    - данные для сервера передаются в теле запроса, но могут отправляться и доп. параметры в урле

  Формат отправки данных - кодировка application/json:
    - данные передаются в методе send() json-строкой
    - потребуется выставить специальный заголовок запроса
    - способ подходит для отправки сложных структур
*/
(function() {
    var xhr = new XMLHttpRequest();

    xhr.open('POST', 'https://reqres.in/users');

	xhr.setRequestHeader('Content-Type', 'application/json');

    xhr.send(JSON.stringify({
        age: 25,
        data: [{}]
    }));
})();

/* Остальные методы запросов:
  PUT:
    - используется для отправки данных, редактирования записи в базе данных
    - данные для сервера передаются в теле запроса, но могут отправляться и доп. параметры в урле
    - кодировки можно использовать такие же, как и для метода POST
    - не все сервера поддерживают метод

  DELETE:
    - используется для для отправки данных, удаления записи из базы данных
    - данные для сервера передаются в теле запроса, но могут отправляться и доп. параметры в урле
    - кодировки можно использовать такие же, как и для метода POST
    - не все сервера поддерживают метод

  OPTIONS *:
    - отправляется браузером по-умолчанию перед запросами методами PUT/DELETE с целью проверить, поддерживает ли
      сервер данные методы
*/