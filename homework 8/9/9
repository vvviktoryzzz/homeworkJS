ФУНКЦИОНАЛЬНЫЙ СТИЛЬ ООП
  Функциональное наследование, расширение метода родителя:
      - https://learn.javascript.ru/functional-inheritance
      - Если в дочернем классе динамических свойств больше, чем в родительском, они всегда записываются в параметрах после
        родительских, а в самом классе после наследования
      - Родительские методы можно не только расширять, но и просто перезаписывать

      Защищенные свойства и методы:
        - Их имя начинается с _ . Технически они являются публичными, поскольку записаны в this. Но относиться к ним стоит
          как к приватным (а именно - использовать только в самом коде класса или классов наследников, не вызывать
          напрямую из объекта класса, не изменять снаружи класса).
        - Приватные свойства и методы следует переносить в защищенные только если к ним требуется доступ из дочерних классов.

    Chaining:
      - Это способ упрощения кода в случае вызова нескольких методов, применяемых к одному и тому же объекту.
        Иначе говоря это "цепочка методов".
      - Слайды B.60d-e - Реализация

ПРОТОТИПНЫЙ СТИЛЬ ООП
  Прототип объекта (__proto__), методы hasOwnProperty и create:
    - http://web.archive.org/web/20190405104459/https://learn.javascript.ru/prototype
    - __proto__ - это свойство объекта-наследника, хранящее в себе ссылку на объект-прототип
      (работает только для чтения значений свойств из объекта-наследника)
    - Прототип - это объект, от которого наследуются свойства или методы

    Практическое задание - задача 1 с https://learn.javascript.ru/prototype

  Свойства Prototype и Constructor:
    - https://learn.javascript.ru/new-prototype
    - Prototype - это свойство функции-конструктора класса, хранящее в себе ссылку на объект-прототип (хранилище, чаще
      всего, методов класса в данном контексте)
    - При создании конкретного объекта класса через new - в его свойство __proto__ будет записываться ссылка на объект
      из Prototype
    - Схема работы свойств Prototype и Proto - см. скрины

    Практическое задание - задача 1 с https://learn.javascript.ru/new-prototype

  Встроенные классы в JavaScript, добавление кастомных методов в эти классы:
    - http://web.archive.org/web/20190405104458/http://learn.javascript.ru/native-prototypes
    - Метод встроенного класса Array для подсчета суммы элементов массива - см. скрин

  Описание собственного класса, сравнение двух стилей программирования:
    - http://web.archive.org/web/20190405104458/http://learn.javascript.ru/classes
    - Приватные свойства и методы в прототипном стиле становятся защищенными и записываются через _ (методы записываются
      в prototype), публичные свойства и методы таковыми и остаются
    - Геттеры и сеттеры работают соответственно с защищенными свойствами

  Прототипное наследование, расширение метода родителя:
    - http://web.archive.org/web/20190405104458/http://learn.javascript.ru/class-inheritance
    - Cпособы прототипного наследования - см. скрин

ДОМАШНЕЕ ЗАДАНИЕ 7
  Задание 1:
    Создать класс Animal. Перенести в него все свойства и методы. Отнаследоваться внутри Cat от Animal.
    Расширить метод feed для кошек. Теперь он должен выводить в консоль информацию вида:
      "Насыпаем в миску (количество гр.) корма.
      Кот доволен ^_^"
    Использовать вызов родительского метода вида animalFeed() и сохранение контекста this через переменную.
    Все вызовы, которые работали ранее, должны по-прежнему работать корректно.

    Добавить публичный метод stroke, который будет выводить в консоль информацию "Гладим кота.".
    Доделать метод feed таким образом, чтобы можно было цепочкой вызывать его и метод stroke в любой
    последовательности и сколько угодно раз.
    (Лишние логи можно убрать, делать всё в том же задании).

  Задание 2:
    Переписать предыдущий пример с кошками на прототипный стиль ООП.