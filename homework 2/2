АРИФМЕТИЧЕСКИЕ ОПЕРАЦИИ
  - См. скрины
  - При использовании пре- и пост- операций с другими арифметическими операциями приоритет будет у первых

  Практическое задание:
    Чему будут равны переменные a, b, c, d?
      var a = 1, b = 1, c, d;

      c = ++a;
      d = b++;
      c = (2+ ++a);
      d = (2+ b++);
      a;
      b;

ПОДВОДНЫЕ КАМНИ JAVASCRIPT *
  - https://habrahabr.ru/post/159313/

ПРОСТЕЙШИЕ ОПЕРАТОРЫ
  Строковые операции:
    - См. скрин (склейка строк с переменными)
  Операции сравнения:
    - См. скрины

ПРЕОБРАЗОВАНИЕ ТИПОВ
  Преобразование к числовому типу:
    - См. скрины
  Преобразование к строковому типу:
    - См. скрин
    - Отличие методов String() от toString() - см. скрин
  Примеры приведения типов к числу и к строке:
    - См. скрины *

ЛОГИЧЕСКИЕ ОПЕРАЦИИ
  Логические операции:
    - См. скрин
    - "Или" спотыкается на правде / "и" спотыкается на лжи
  Преобразование к логическому типу:
    - См. скрин
    - ! сначала приводит значение к булеану, а затем меняет его на противоположное
  Примеры приведения к логическому типу:
    - См. скрины
  Принцип работы логических выражений:
    - См. скрины
    - Можно комбинировать сколько угодно операций друг с другом
    - Порядок приоритетов - !, затем &&, затем ||
    - Если записано действие в одной из частей - то оно выполняется

  Практическое задание - задачи 1-5 с https://web.archive.org/web/20190405104508/https://learn.javascript.ru/logical-ops

УСЛОВНЫЕ ОПЕРАТОРЫ
  Оператор if/else и тернарный оператор:
    - http://web.archive.org/web/20190405104508/http://learn.javascript.ru/ifelse
    - Содержимое условий приводится к логическому типу
    - Скобки позволяют переопределить приоритетность действий (если в
      условии присутствует много под-условий)
    - if и else употребляются только один раз в начале и в конце конструкции соответственно, а else if можно использовать
      между ними сколько угодно раз; можно заканчивать конструкцию на ветке else if
    - if-ы можно вкладывать друг в друга
    - Тернарный оператор стоит использовать тогда, когда в каждой ветке условия фигурирует присвоение значения в одну и
      ту же переменную или, например, имеется по одному простому действию; присвоение в переменную выносится в начало
      строки
    - Без else тернарный оператор не имеет смысла и работать не будет

ДОМАШНЕЕ ЗАДАНИЕ 2
  Задание 1:
    Написать программу, которая проделывает следующие операции:
    запрашивает у пользователя число,
    затем последовательно задает вопросы "Сколько прибавить/отнять/умножить/разделить от предыдущего результата?".
    Сложение и вычитание выполнять в первую очередь.
    По окончании вывести пользователю один alert, содержащий математически Правильную формулу
    и результат вида:
      "Формула: 6 + 10 - 5 и т.д.
      Результат: 11"

  Задание 2:
    Написать код, который:
    будет спрашивать логин (prompt),
    если посетитель вводит "Админ", то спрашивать пароль, если нажал отмена – выводить "Вход отменён",
    если вводит что-то другое – "Я вас не знаю".
    Пароль проверять так. Если введён пароль "Чёрный Властелин", то выводить "Добро пожаловать!",
    при отмене – "Вход отменён", иначе – "Пароль неверен".
    Для решения использовать вложенные блоки if.

  Задание 3:
    Переписать if..else с использованием множественного тернарного оператора:

    var message;

    if (login === 'Вася') {
      message = 'Привет';
    } else if (login === 'Директор') {
      message = 'Здравствуйте';
    } else if (login === '') {
      message = 'Нет логина';
    } else {
      message = '';
    }

  Задание 4 *:
    Написать код, который будет спрашивать у пользователя:
      - Фамилию, имя, отчество (раздельно)
      - Возраст в годах
      - Пол (оператором confirm, например, "Ваш пол - мужской?")
    и выводить в один alert анкету пользователя вида:
      "Ваше ФИО: Иванов Иван Иванович
      Ваш возраст в годах: 20
      Ваш возраст в днях: 7300
      Через 5 лет вам будет: 25
      Ваш пол: мужской
      Вы на пенсии: нет"
    Также должна присутствовать следующая валидация:
      - Поля ФИО не должны быть пустыми
      - Возраст не должен быть пустым, не должен пропускать буквы, должен быть корректным (не NaN) и адекватным числом
      - Високосные года в подсчете количества дней разрешается не учитывать
      - Пенсия должна высчитываться исходя из пола и возраста
    Поведение при ошибках валидации:
      - При вводе неверных данных в поле необходимо вывести сообщение об ошибке и запросить данные заново (здесь можно
        использовать ранее не пройденную конструкцию)
      - При нажатии на "Отмена" можно использовать поведение, описанное выше, или же просто в итоговой анкете вместо
        данных из поля подставлять прочерк

  (!!!) Решение скидывать в одном js-файле, задачи не закомменчивать. То, что не проходили, в том числе и синтаксис ES6
        использовать нельзя.