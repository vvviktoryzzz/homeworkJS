DOM
  Работа с атрибутами:
    - См. скрины - данные передаются строкой
    - Некоторые DOM-свойства (свойства DOM-объектов) являются аналогами атрибутов в HTML

    Data-атрибуты:
      - Кастомные атрибуты, название которых начинается с приставки data- , создающиеся, как правило, для
        того, чтобы сохранять в них какие-то данные, с которыми взаимодействует JavaScript
      - Примеры использования - хранение id, состояния элемента, текста тултипов
      - См. скрин
  Работа с классами:
    - Cм. скрины
  Работа со стилями:
    - D.20 (стр. 83-84)
    - Стили грамотнее всего устанавливать через добавление класса к элементу, установка стилей напрямую через style
      используется чаще всего при работе с координатами/анимациями, либо когда работа ведется с одиночными стилевыми
      св-вами не противоположного характера
  Некоторые нюансы:
    - Семантика использования методов DOM

СОБЫТИЯ
  Виды событий:
    - E.05
    - Пример с параллаксом

    Доп. инфо *:
      - Mouse Events - см. примеры

  Установка обработчиков и перехватчиков событий:
    - E.15

    Разница между addEventListener и on:
      - Для addEventListener можно задать режим (обработчик либо перехватчик)
      - С помощью addEventListener можно задавать сколько угодно однотипных обработчиков событий для одного элемента,
        тогда как если повесить два обработчика на одно и то же событие с помощью on - последний перезапишет
        предыдущий (пример в консоли)

  Объект Event:
    - Event - объект с информацией о произошедшем событии (пример в консоли)
    - Если к данному объекту планируется обращаться по его предзаданному имени - параметр в функции-коллбэке можно не
      указывать

  Всплытие и перехват события:
    - https://learn.javascript.ru/event-bubbling
    - event.target - ссылка на DOM-объект, на котором непосредственно изначально произошло событие (пример в консоли)
    - event.currentTarget - ссылка на DOM-объект, до которого дошло всплытие

  Отменяющие действия:
    - См. примеры
    - event.preventDefault() - отменяет действие события, заданное браузером по-умолчанию

  Делегирование событий:
    - http://web.archive.org/web/20190405104451/http://learn.javascript.ru/event-delegation
    - Делегирование также используется тогда, когда необходимо навесить обработчики событий на новые созданные элементы
      (т.е. на те элементы, которых не было в DOM на момент загрузки страницы)

  Практическое задание (продолжение предыдущего задания):
    По клику на имеющуюся кнопку (получать ее по тегу) найти все дочерние ссылки у первого абзаца с помощью возможностей
    DOM-навигации и произвести соответствующие действия с ссылками (задание стилей лучше использовать через добавление
    css-класса). Установить событие клика на второй абзац (!!!) другим способом. Если пользователь нажимает на ссылки
    2-го абзаца, необходимо отменить им поведение по-умолчанию и вывести alert со значением атрибута href ссылки.

ДОМАШНЕЕ ЗАДАНИЕ 11
  Задание 1:
    Сверстать таблицу из 3х столбцов, в последней строке которой все ячейки объеденены в одну с текстом
    "Добавить".
    По клику на эту ячейку-кнопку в начало таблицы должна добавляться новая строка.
    По клику на ячейку таблицы, в ней должен появиться сфокусированный (!!!) текстовый инпут.
    При потере фокуса инпутом - он должен исчезнуть, на его месте остается лишь ранее введенный в него текст.
    При клике на ячейку, уже содержащую текст - вставляется инпут с этим же текстом (т.е. можно отредактировать текст).
    В одно время в таблице может находиться только один инпут.
    При реализации использовать делегирование событий.

    Добавить событие по нажатию на Enter в случае, если на странице есть активный инпут. Событие должно работать точно
    так же, как и потеря фокуса, то есть прятать инпут и оставлять в ячейке текст. *
